---
import '../styles/theme.scss';
import Footer from '@components/layouts/footer';
import Navigation from '@components/layouts/navigation';
import { SEO } from 'astro-seo';
import site from '@data/site.json';
import i18next, { t } from 'i18next';
import {
  Trans,
  HeadHrefLangs,
  LanguageSelector,
} from 'astro-i18next/components';

export interface SEOProps {
  page_description: string | null;
  featured_image: string | null;
  featured_image_alt: string | null;
  canonical_url: string | null;
  no_index: boolean | null;
  open_graph_type: string | null;
  author_twitter_handle: string | null;
}

export interface Props {
  title: string;
  seo?: SEOProps;
}

const { seo } = Astro.props;
const baseUrl = Astro.site;
const title = Astro.props.title
  ? `${Astro.props.title} | ${site.site_title}`
  : site.site_title;
const description = seo?.page_description || site.description;
const image = seo?.featured_image || site.image;
const image_alt = seo?.featured_image_alt || site.image_alt;
const canonicalURL = new URL(seo?.canonical_url ?? Astro.url.pathname, baseUrl);

console.log('LANG', i18next.language);
---

<!DOCTYPE html>
<html lang={i18next.language}>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link href="/vendor/bootstrap/bootstrap.min.css" rel="stylesheet" />
    <link href="/vendor/phosphor-icons/css/phosphor.css" rel="stylesheet" />
    <link href="/vendor/magnific-popup/magnific-popup.css" rel="stylesheet" />
    <link rel="shortcut icon" href="/images/favicon.ico" type="image/x-icon" />
    <link rel="icon" href="/images/favicon.png" type="image/x-icon" />
    <link rel="apple-touch-icon" href="/apple-touch-icon.png" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="icon" type="image/png" href="/touch-icon.png" sizes="192x192" />
    <link rel="icon" type="image/png" href="/images/favicon.png" />
    <meta name="generator" content={Astro.generator} />
    <HeadHrefLangs />
    <style is:inline></style>
    <SEO
      noindex={seo?.no_index || false}
      title={title}
      description={description}
      canonical={canonicalURL.toString()}
      openGraph={{
        basic: {
          title: Astro.props.title,
          url: baseUrl?.toString(),
          type: `${seo?.open_graph_type || 'website'}`,
          image: image,
        },
        optional: {
          description: description,
        },
        image: {
          url: image,
          alt: image_alt,
        },
      }}
      twitter={{
        creator: `${seo?.author_twitter_handle || site.twitter_site}`,
        site: `${site.twitter_site}`,
        card: 'summary_large_image',
      }}
    />
  </head>
  <body class="relative">
    <Navigation pageUrl={canonicalURL} />
    <slot />
    <Footer />

    <script src="/vendor/jQuery/jquery.min.js" is:inline></script>
    <script src="/vendor/bootstrap/bootstrap.bundle.min.js" is:inline></script>
    <script src="/vendor/counter-up/countup.js" is:inline></script>
    <script src="/vendor/magnific-popup/magnific-popup.min.js" is:inline
    ></script>
    <script src="/js/script.js" async></script>
    <!-- Calendly badge widget begin -->
    <link
      href="https://assets.calendly.com/assets/external/widget.css"
      rel="stylesheet"
    />
    <script
      src="https://assets.calendly.com/assets/external/widget.js"
      type="text/javascript"
      async
    ></script>
    <script type="text/javascript" define:vars={{ text: t('layout.demotitle') }}
    >
      window.onload = function () {
        Calendly.initBadgeWidget({
          url: 'https://calendly.com/bram-tripleblue/30min-demo',
          text: text,
          color: '#2684FF',
          textColor: '#ffffff',
          branding: false,
        });
      };
    </script>
    <!-- Calendly badge widget end -->

    <script>
      $(window).on('load', function () {
        $('#select-language').on('change', function (e) {
          const selectedLanguage = e.target.value;
          let pathSegments = window.location.pathname
            .split('/')
            .filter(Boolean); // Remove any empty strings from array

          // Adjust pathSegments based on the selected language
          if (
            pathSegments.length > 0 &&
            ['en', 'de', 'el', 'nl'].includes(pathSegments[0])
          ) {
            // Replace or remove the language segment
            if (selectedLanguage === 'nl') {
              pathSegments.shift(); // Remove the first segment if it's 'nl' (default language)
            } else {
              pathSegments[0] = selectedLanguage; // Replace the first segment with the selected language
            }
          } else {
            // Add the new language as the first segment if it's not the default or if it's not present
            if (selectedLanguage !== 'nl' || window.location.pathname === '/') {
              pathSegments = [selectedLanguage, ...pathSegments];
            }
          }

          // Construct the new URL
          const newPath =
            '/' +
            pathSegments.join('/') +
            window.location.search +
            window.location.hash;

          // Navigate to the new URL
          window.location.pathname = newPath;
        });
      });
    </script>
  </body>
</html>
